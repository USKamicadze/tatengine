/* *  TatEnginePanel.jsx *  TatEngine *  based on Adobe Photoshop SDK Per Layer Metadata sample * *  Created by Dmitrii Ivanov on 09/6/12. *  Copyright 2012 Tatem Games. All rights reserved. * */// version 0.03a, from 10.22.12// contacts : jimon@tatemgames.comfunction getTatPresets(){	return new Array("none", "button", "progressBarCenter", "progressBarRight", "alphaAnim", "spriteAnimFirstFrame", "spriteAnimFrame", "spriteAnimFinalFrame", "cutToWidth", "scale");};function getTatPresetArgs(type){	switch(type)	{	case "none":		return ",,,";	case "button":		return ",,,";	case "progressBarCenter":		return "sizeMin,sizeMax,,";	case "progressBarRight":		return "posMin,posMax,,";	case "alphaAnim":		return "valMin,valMax,,";	case "spriteAnimFirstFrame":		return ",,,";	case "spriteAnimFrame":		return "nameOfFirstFrame,,,";	case "spriteAnimFinalFrame":		return "nameOfFirstFrame,,,";	case "cutToWidth":		return "cutWidth,OriginalWidth,,";	case "scale":		return "koef,,,";	default:		alert("Preset type " + type + " is unknown.");		return ",,,";	}}function getTatPresetCode(type, arg0, arg1, arg2, arg3){	var code = "";	switch(type)	{	case "none":		break;	case "button":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%_btn\",\n";		code += "\t\t\"nodeType\" : \"button\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"sprite\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"sprite\",\n";		code += "\t\t\t\t\"toField\" : \"self\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t}\n";		code += "]\n";		break;	case "progressBarCenter":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%_curv\",\n";		code += "\t\t\"nodeType\" : \"curve\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"value\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"transform\",\n";		code += "\t\t\t\t\"toField\" : \"scale.x\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t\t\"data\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve0.y\",\n";		code += "\t\t\t\t\"data\" : " + arg0 + ",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve1.y\",\n";		code += "\t\t\t\t\"data\" : " + arg1 + ",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t}\n";		code += "]\n";		break;	case "progressBarRight":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%_curv\",\n";		code += "\t\t\"nodeType\" : \"curve\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"value\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"transform\",\n";		code += "\t\t\t\t\"toField\" : \"position.x\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t\t\"data\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve0.y\",\n";		code += "\t\t\t\t\"data\" : " + arg0 + ",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve1.y\",\n";		code += "\t\t\t\t\"data\" : " + arg1 + ",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curveType\",\n";		code += "\t\t\t\t\"data\" : 33.0,\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t}\n";		code += "]\n";		break;	case "alphaAnim":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%_curv\",\n";		code += "\t\t\"nodeType\" : \"curve\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"value\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"sprite\",\n";		code += "\t\t\t\t\"toField\" : \"color.a\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t\t\"data\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve0.y\",\n";		code += "\t\t\t\t\"data\" : " + arg0 + "\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve1.y\",\n";		code += "\t\t\t\t\"data\" : " + arg1 + "\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve2.y\",\n";		code += "\t\t\t\t\"data\" : " + arg0 + "\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve1.x\",\n";		code += "\t\t\t\t\"data\" : 0.5\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"curve2.x\",\n";		code += "\t\t\t\t\"data\" : 1.0\n";		code += "\t\t\t},\n";		code += "\t\t]\n";		code += "\t}\n";		code += "]\n";		break;	case "spriteAnimFirstFrame":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%_frames\",\n";		code += "\t\t\"nodeType\" : \"array\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"nested\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"material\",\n";		code += "\t\t\t\t\"toField\" : \"self\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"moveCursor\",\n";		code += "\t\t\"x\" : 96,\n";		code += "\t\t\"y\" : 0,\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%_anim\",\n";		code += "\t\t\"nodeType\" : \"spriteAnimation\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"sprite\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"sprite\",\n";		code += "\t\t\t\t\"toField\" : \"self\",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"frames\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%_frames\",\n";		code += "\t\t\t\t\"toType\" : \"array\",\n";		code += "\t\t\t\t\"toField\" : \"self\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"moveCursor\",\n";		code += "\t\t\"x\" : -96,\n";		code += "\t\t\"y\" : -32,\n";		code += "\t},\n";		code += "]\n";		break;	case "spriteAnimFrame":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"" + arg0 + "_frames\",\n";		code += "\t\t\"nodeType\" : \"array\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"nested\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"material\",\n";		code += "\t\t\t\t\"toField\" : \"self\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"texture\",\n";		code += "\t\t\"dataAdv\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"%baseName%\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.x\",\n";		code += "\t\t\t\t\"field\" : \"origin.x\",\n";		code += "\t\t\t\t\"data\" : \"(%1 * (-1))\",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"%baseName%\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.y\",\n";		code += "\t\t\t\t\"field\" : \"origin.y\",\n";		code += "\t\t\t\t\"data\" : \"(%1)\",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"" + arg0 + "\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.x\",\n";		code += "\t\t\t\t\"field\" : \"origin.x\",\n";		code += "\t\t\t\t\"data\" : \"(%1 + %2)\",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"" + arg0 + "\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.y\",\n";		code += "\t\t\t\t\"field\" : \"origin.y\",\n";		code += "\t\t\t\t\"data\" : \"(%2 - %1)\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"removeNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"transform\",\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"removeNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"sprite\",\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"moveCursor\",\n";		code += "\t\t\"x\" : 0,\n";		code += "\t\t\"y\" : -32,\n";		code += "\t},\n";		code += "]\n";		break;	case "spriteAnimFinalFrame":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"" + arg0 + "_frames\",\n";		code += "\t\t\"nodeType\" : \"array\",\n";		code += "\t\t\"links\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromField\" : \"nested\",\n";		code += "\t\t\t\t\"toName\" : \"%baseName%\",\n";		code += "\t\t\t\t\"toType\" : \"material\",\n";		code += "\t\t\t\t\"toField\" : \"self\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"texture\",\n";		code += "\t\t\"dataAdv\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"%baseName%\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.x\",\n";		code += "\t\t\t\t\"field\" : \"origin.x\",\n";		code += "\t\t\t\t\"data\" : \"(%1 * (-1))\",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"%baseName%\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.y\",\n";		code += "\t\t\t\t\"field\" : \"origin.y\",\n";		code += "\t\t\t\t\"data\" : \"(%1)\",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"" + arg0 + "\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.x\",\n";		code += "\t\t\t\t\"field\" : \"origin.x\",\n";		code += "\t\t\t\t\"data\" : \"(%1 + %2)\",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"fromNode\" : \"" + arg0 + "\",\n";		code += "\t\t\t\t\"fromType\" : \"transform\",\n";		code += "\t\t\t\t\"fromField\" : \"position.y\",\n";		code += "\t\t\t\t\"field\" : \"origin.y\",\n";		code += "\t\t\t\t\"data\" : \"(%2 - %1)\",\n";		code += "\t\t\t}\n";		code += "\t\t]\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"removeNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"transform\",\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"removeNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"sprite\",\n";		code += "\t},\n";		code += "]\n";		break;	case "cutToWidth":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"cutToWidth\",\n";		code += "\t\t\"width\" : " + arg0 + ",\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"transform\",\n";		code += "\t\t\"data\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"scale.x\",\n";		code += "\t\t\t\t\"data\" : " + (arg1 / arg0) + ",\n";		code += "\t\t\t},\n";		code += "\t\t]\n";		code += "\t},\n";		code += "]\n";		break;	case "scale":		code += "[\n";		code += "\t{\n";		code += "\t\t\"type\" : \"scale\",\n";		code += "\t\t\"scale\" : " + arg0 + ",\n";		code += "\t},\n";		code += "\t{\n";		code += "\t\t\"type\" : \"createNode\",\n";		code += "\t\t\"nodeName\" : \"%baseName%\",\n";		code += "\t\t\"nodeType\" : \"transform\",\n";		code += "\t\t\"data\" :\n";		code += "\t\t[\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"scale.x\",\n";		code += "\t\t\t\t\"data\" : " + (1.0 / arg0) + ",\n";		code += "\t\t\t},\n";		code += "\t\t\t{\n";		code += "\t\t\t\t\"field\" : \"scale.y\",\n";		code += "\t\t\t\t\"data\" : " + (1.0 / arg0) + ",\n";		code += "\t\t\t},\n";		code += "\t\t]\n";		code += "\t},\n";		code += "]\n";		break;	default:		alert("Preset type " + type + " is unknown.");		return "";	}	return Base64.encode(code);};function getTatMetadata(){	var xml = "<object>";	xml += convertToXML(Base64.encode(getTatPresets().toString()), "presets");	if(app.activeDocument.activeLayer.isBackgroundLayer || !loadXMPLibrary())	{		xml += convertToXML("", "layerName");		xml += convertToXML("", "preset");		xml += convertToXML("", "presetArg0");		xml += convertToXML("", "presetArg1");		xml += convertToXML("", "presetArg2");		xml += convertToXML("", "presetArg3");		xml += convertToXML("", "presetCustom");		xml += convertToXML("", "code");	}	else	{		try		{			xml += convertToXML(app.activeDocument.activeLayer.name.toString(), "layerName");		}		catch(e)		{			xml += convertToXML("", "layerName");		}		var xmp;		try		{			xmp = new XMPMeta(app.activeDocument.activeLayer.xmpMetadata.rawData);		}		catch(e)		{			xml += convertToXML("", "preset");			xml += convertToXML("", "presetArg0");			xml += convertToXML("", "presetArg1");			xml += convertToXML("", "presetArg2");			xml += convertToXML("", "presetArg3");			xml += convertToXML("", "presetCustom");			xml += convertToXML("", "code");			xml += "</object>";			unloadXMPLibrary();			return xml;		}		var preset;		try		{			preset = xmp.getProperty(XMPConst.NS_EXIF, "tatenginePreset").toString();			xml += convertToXML(Base64.encode(preset), "preset");		}		catch(e){xml += convertToXML("", "preset");}		if(preset != null)			xml += convertToXML(Base64.encode(getTatPresetArgs(preset).toString()), "presetArgs");		else			xml += convertToXML("", "presetArgs");		try{xml += convertToXML(Base64.encode(xmp.getProperty(XMPConst.NS_EXIF, "tatenginePresetArg0").toString()), "presetArg0");}		catch(e){xml += convertToXML("", "presetArg0");}		try{xml += convertToXML(Base64.encode(xmp.getProperty(XMPConst.NS_EXIF, "tatenginePresetArg1").toString()), "presetArg1");}		catch(e){xml += convertToXML("", "presetArg1");}		try{xml += convertToXML(Base64.encode(xmp.getProperty(XMPConst.NS_EXIF, "tatenginePresetArg2").toString()), "presetArg2");}		catch(e){xml += convertToXML("", "presetArg2");}		try{xml += convertToXML(Base64.encode(xmp.getProperty(XMPConst.NS_EXIF, "tatenginePresetArg3").toString()), "presetArg3");}		catch(e){xml += convertToXML("", "presetArg3");}		try{xml += convertToXML(Base64.encode(xmp.getProperty(XMPConst.NS_EXIF, "tatenginePresetCustom").toString()), "presetCustom");}		catch(e){xml += convertToXML("", "presetCustom");}		try{xml += convertToXML(xmp.getProperty(XMPConst.NS_EXIF, "tatengineMetaData").toString(), "code");}		catch(e){xml += convertToXML("", "code");}	}	xml += "</object>";	unloadXMPLibrary();	return xml;}function setTatMetadata(preset, presetArg0, presetArg1, presetArg2, presetArg3, presetCustom, code){	preset = Base64.decode(preset);	preset = getTatPresets()[parseInt(preset)];	presetArg0 = Base64.decode(presetArg0);	presetArg1 = Base64.decode(presetArg1);	presetArg2 = Base64.decode(presetArg2);	presetArg3 = Base64.decode(presetArg3);	presetCustom = Base64.decode(presetCustom);	if(app.activeDocument.activeLayer.isBackgroundLayer || !loadXMPLibrary())	{		alert("Can't place comments metadata on a background layer.\n" + "Layer > New > Layer From Background...");	}	else	{		var xmp;		if(presetCustom == "false")			code = getTatPresetCode(preset, presetArg0, presetArg1, presetArg2, presetArg3);		try		{			xmp = new XMPMeta(app.activeDocument.activeLayer.xmpMetadata.rawData);		}		catch(e)		{			xmp = new XMPMeta();		}		try		{			xmp.setProperty(XMPConst.NS_EXIF, "tatenginePreset", preset);			xmp.setProperty(XMPConst.NS_EXIF, "tatenginePresetArg0", presetArg0);			xmp.setProperty(XMPConst.NS_EXIF, "tatenginePresetArg1", presetArg1);			xmp.setProperty(XMPConst.NS_EXIF, "tatenginePresetArg2", presetArg2);			xmp.setProperty(XMPConst.NS_EXIF, "tatenginePresetArg3", presetArg3);			xmp.setProperty(XMPConst.NS_EXIF, "tatenginePresetCustom", presetCustom);			xmp.setProperty(XMPConst.NS_EXIF, "tatengineMetaData", code);		}		catch(e)		{			alert("Unable to place comments metadata on selected layer.\n" + e);		}		app.activeDocument.activeLayer.xmpMetadata.rawData = xmp.serialize();	}	unloadXMPLibrary();}function exportLayerMetadata(){	var path = File.saveDialog();	var file = new File(path);	file.encoding = "UTF-8";	try	{		file.open("w");		file.write(app.activeDocument.activeLayer.xmpMetadata.rawData.toString());	}	catch(e)	{		alert("Unable to write to file.\n" + e);	}	file.close();}function clearAllMetaData(){	if(app.activeDocument.activeLayer.isBackgroundLayer || !loadXMPLibrary())	{		alert("Can't place comments metadata on a background layer.\n" + "Layer > New > Layer From Background...");	}	else	{		app.activeDocument.activeLayer.xmpMetadata.rawData = "";	}		unloadXMPLibrary();}function loadXMPLibrary(){	if(!ExternalObject.AdobeXMPScript)	{		try		{			ExternalObject.AdobeXMPScript = new ExternalObject('lib:AdobeXMPScript');		}		catch(e)		{			alert("Can't load XMP Script Library");			return false;		}	}	return true;}function unloadXMPLibrary(){	if(ExternalObject.AdobeXMPScript)	{		try		{			ExternalObject.AdobeXMPScript.unload();			ExternalObject.AdobeXMPScript = undefined;		}		catch(e)		{			alert("Can't unload XMP Script Library");		}	}}function convertToXML(property, identifier){	var type = typeof property;	var xml = '<property id = "' + identifier + '" >';	switch(type)	{	case "number":		xml += "<number>";		xml += property.toString();		xml += "</number>";		break;	case "boolean":		xml += "<" + property.toString() + "/>";		break;	case "string":		xml += "<string>";		xml += property.toString();		xml += "</string>";		break;	case "object":		alert("Object case is currently not supported");		break;	case "undefined":		xml += "<string>undefined</string>";		break;	default:		alert("Type " + type + " is unknown.");		return "";	}	xml += '</property>';	return xml;}var Base64 = {// private property_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",// public method for encodingencode : function (input) {    var output = "";    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;    var i = 0;    input = Base64._utf8_encode(input);    while (i < input.length) {        chr1 = input.charCodeAt(i++);        chr2 = input.charCodeAt(i++);        chr3 = input.charCodeAt(i++);        enc1 = chr1 >> 2;        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);        enc4 = chr3 & 63;        if (isNaN(chr2)) {            enc3 = enc4 = 64;        } else if (isNaN(chr3)) {            enc4 = 64;        }        output = output +        this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +        this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);    }    return output;},// public method for decodingdecode : function (input) {    var output = "";    var chr1, chr2, chr3;    var enc1, enc2, enc3, enc4;    var i = 0;    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");    while (i < input.length) {        enc1 = this._keyStr.indexOf(input.charAt(i++));        enc2 = this._keyStr.indexOf(input.charAt(i++));        enc3 = this._keyStr.indexOf(input.charAt(i++));        enc4 = this._keyStr.indexOf(input.charAt(i++));        chr1 = (enc1 << 2) | (enc2 >> 4);        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);        chr3 = ((enc3 & 3) << 6) | enc4;        output = output + String.fromCharCode(chr1);        if (enc3 != 64) {            output = output + String.fromCharCode(chr2);        }        if (enc4 != 64) {            output = output + String.fromCharCode(chr3);        }    }    output = Base64._utf8_decode(output);    return output;},// private method for UTF-8 encoding_utf8_encode : function (string) {    string = string.replace(/\r\n/g,"\n");    var utftext = "";    for (var n = 0; n < string.length; n++) {        var c = string.charCodeAt(n);        if (c < 128) {            utftext += String.fromCharCode(c);        }        else if((c > 127) && (c < 2048)) {            utftext += String.fromCharCode((c >> 6) | 192);            utftext += String.fromCharCode((c & 63) | 128);        }        else {            utftext += String.fromCharCode((c >> 12) | 224);            utftext += String.fromCharCode(((c >> 6) & 63) | 128);            utftext += String.fromCharCode((c & 63) | 128);        }    }    return utftext;},// private method for UTF-8 decoding_utf8_decode : function (utftext) {    var string = "";    var i = 0;    var c = c1 = c2 = 0;    while ( i < utftext.length ) {        c = utftext.charCodeAt(i);        if (c < 128) {            string += String.fromCharCode(c);            i++;        }        else if((c > 191) && (c < 224)) {            c2 = utftext.charCodeAt(i+1);            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));            i += 2;        }        else {            c2 = utftext.charCodeAt(i+1);            c3 = utftext.charCodeAt(i+2);            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));            i += 3;        }    }    return string;}}